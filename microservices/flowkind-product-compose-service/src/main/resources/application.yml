springdoc:
  api-docs:
    enabled: true
    path: /openapi/v3/api-docs
  swagger-ui:
    path: /openapi/swagger-ui.html
  packages-to-scan: app.flowkind.microservices.compose.product
  paths-to-match: /**
myip: "13.78.214.64"
api:
  common:
    version: 1.0.0
    title: Product Composite Service
    description: This will give overall details of review,recommendation for product
    termsOfService: Opensource
    license: MIT
    licenseURL: https://github.com/JatinderKumarChaurasia/flowkind-kubernetes-app/blob/main/LICENSE
    externalDocUrl: https://github.com/JatinderKumarChaurasia/flowkind-kubernetes-app/blob/main/LICENSE
    externalDocDesc: https://github.com/JatinderKumarChaurasia/flowkind-kubernetes-app/blob/main/LICENSE
    contact:
      name: Jatinder Kumar Chaurasia
      url: https://JatinderKumarChaurasia.github.io
      email: admin@flowkind.app
  responseCodes:
    ok.description: OK
    badRequest.description: Bad Request, invalid format of the request. See response message for more information
    notFound.description: Not found, the specified id does not exist
    unprocessableEntity.description: Unprocessable entity, input parameters caused the processing to fail. See response message for more information
  product-composite:
    get-composite-product:
      description: Returns a composite view of the specified product id
      notes: |
        # Normal response
        If the requested product id is found the method will return information regarding:
        1. Base product information
        1. Reviews
        1. Recommendations
        1. Service Addresses\n(technical information regarding the addresses of the microservices that created the response)
        # Expected partial and error responses
        In the following cases, only a partial response be created (used to simplify testing of error conditions)
        ## Product id 113
        200 - Ok, but no recommendations will be returned
        ## Product id 213
        200 - Ok, but no reviews will be returned
        ## Non numerical product id
        400 - A **Bad Request** error will be returned
        ## Product id 13
        404 - A **Not Found** error will be returned
        ## Negative product ids
        422 - An **Unprocessable Entity** error will be returned
    create-composite-product:
      description: Creates a composite product
      notes: |
        # Normal response
        The composite product information posted to the API will be split up and stored as separate product-info, recommendation and review entities.
        # Expected error responses
        1. If a product with the same productId as specified in the posted information already exists,
           an **422 - Unprocessable Entity** error with a "duplicate key" error message will be returned
    delete-composite-product:
      description: Deletes a product composite
      notes: |
        # Normal response
        Entities for product information, recommendations and reviews related to the specified productId will be deleted.
        The implementation of the delete method is idempotent, i.e. it can be called several times with the same response.
        This means that a delete request of a non-existing product will return **200 Ok**.

server.port: 7000
server.error.include-message: always

logging:
  level:
    root: INFO
    app.flowkind: DEBUG

flowkind-app:
  flowkind-core-product-service:
    host: localhost
    port: 7001
  flowkind-core-review-service:
    host: localhost
    port: 7002
  flowkind-core-recommendation-service:
    host: localhost
    port: 7003

spring:
  cloud:
    stream:
      default-binder: rabbit
      default.contentType: application/json
      bindings:
        products-out-0:
          destination: products
          producer:
            required-groups: auditGroup
        recommendations-out-0:
          destination: recommendations
          producer:
            required-groups: auditGroup
        reviews-out-0:
          destination: reviews
          producer:
            required-groups: auditGroup

      kafka:
        binder:
          brokers: ${myip}
          defaultBrokerPort: 9092

  rabbitmq:
    host: ${myip}
    port: 5672
    username: guest
    password: guest

management:
  endpoint:
    health:
      show-details: always
  endpoints:
    web:
      exposure:
        include: '*'
